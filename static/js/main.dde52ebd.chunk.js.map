{"version":3,"sources":["Navbar.jsx","Result.jsx","Info.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","style","color","Result","props","stat","statName","toUpperCase","val","Info","marginTop","marginBottom","width","src","pic","alt","name","height","weight","App","useState","setName","data1","setData1","data2","setData2","data3","setData3","data4","setData4","data5","setData5","useEffect","fetchData","a","fetch","result","json","console","log","stats","sprites","front_default","onChange","event","target","value","placeholder","onClick","map","data","ind","base_stat","key","fontSize","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4OAYeA,MAVf,WACE,OACE,6BACE,yBAAKC,UAAU,uBACb,0BAAMC,MAAO,CAACC,MAAO,SAAUF,UAAU,wBAAzC,eCOOG,MAXf,SAAgBC,GAEZ,IAAIC,EAAOD,EAAME,SAEnB,OACE,6BACE,+BAAKD,EAAKE,cAAV,MAA4BH,EAAMI,OCWzBC,MAjBf,SAAcL,GAOV,OACI,oCACI,yBAAKH,MAPC,CACVS,UAAW,QACXC,aAAc,QACdC,MAAO,SAIgBC,IAAKT,EAAMU,IAAKC,IAAI,gBACvC,qCAAWX,EAAMY,KAAKT,eACtB,uCAAaH,EAAMa,QACnB,uCAAab,EAAMc,UCwChBC,MA/Cf,WAAgB,IAAD,EAEWC,mBAAS,SAFpB,mBAENJ,EAFM,KAEAK,EAFA,OAGaD,mBAAS,IAHtB,mBAGNE,EAHM,KAGCC,EAHD,OAIaH,mBAAS,GAJtB,mBAINI,EAJM,KAICC,EAJD,OAKaL,mBAAS,IALtB,mBAKNM,EALM,KAKCC,EALD,OAMaP,mBAAS,IANtB,mBAMNQ,EANM,KAMCC,EAND,OAOaT,mBAAS,IAPtB,mBAONU,EAPM,KAOCC,EAPD,KAUbC,qBAAU,WACRC,MACA,IAEF,IAAMA,EAAS,uCAAG,8BAAAC,EAAA,sEACKC,MAAM,qCAAD,OAAsCnB,IADhD,cACVoB,EADU,gBAEGA,EAAOC,OAFV,OAEVA,EAFU,OAGhBC,QAAQC,IAAIF,GACZd,EAASc,EAAKG,OACdf,EAASY,EAAKpB,QACdU,EAASU,EAAKrB,MACda,EAASQ,EAAKnB,QACda,EAASM,EAAKI,QAAQC,eARN,4CAAH,qDAYf,OACE,yBAAK1C,UAAU,OACb,kBAAC,EAAD,MACA,wFACA,mEACA,2BAAO2C,SAAU,SAACC,GAAD,OAAUvB,EAAQuB,EAAMC,OAAOC,QAAQ9C,UAAU,iBAAiB+C,YAAY,UAAU,6BACzG,4BAAQC,QAAS,kBAAKf,KAAajC,UAAU,4BAA7C,OAAoF,6BACpF,kBAAC,EAAD,CAAMiB,OAAQO,EAAOR,KAAMU,EAAOR,OAAQU,EAAOd,IAAKgB,IACrDR,EAAM2B,KAAI,SAACC,EAAKC,GAAN,OACT,kBAAC,EAAD,CACE3C,IAAK0C,EAAKE,UACV9C,SAAU4C,EAAK7C,KAAKW,KACpBqC,IAAKF,OAGT,6BACA,uBAAGlD,MAAO,CAACqD,SAAS,OAAQpD,MAAM,UAAlC,WAAoD,uBAAGD,MAAO,CAACC,MAAM,SAAUqD,KAAK,yDAAhC,kBAApD,qBCrCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,a","file":"static/js/main.dde52ebd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-light\">\r\n        <span style={{color: \"white\"}} className=\"navbar-brand mb-3 h1\">PokeWiki</span>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nfunction Result(props) {\r\n\r\n    let stat = props.statName;\r\n\r\n  return (\r\n    <div>\r\n      <p> {stat.toUpperCase()} = {props.val}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Result;\r\n","import React from 'react'\r\n\r\nfunction Info(props) {\r\n\r\n    const style = {\r\n        marginTop: \"-25px\",\r\n        marginBottom: \"-15px\",\r\n        width: \"150px\"\r\n    }\r\n    return (\r\n        <>\r\n            <img style={style} src={props.pic} alt=\"pokemon-img\" />\r\n            <p>NAME = {props.name.toUpperCase()}</p>\r\n            <p>HEIGHT = {props.height}</p>\r\n            <p>WEIGHT = {props.weight}</p>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Info\r\n","import React, {useEffect , useState} from 'react';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Navbar from './Navbar';\nimport Result from './Result';\nimport Info from './Info';\n\nfunction App() {\n\n  const [name, setName] = useState('ditto');\n  const [data1, setData1] = useState([]);\n  const [data2, setData2] = useState(0);\n  const [data3, setData3] = useState('');\n  const [data4, setData4] = useState('');\n  const [data5, setData5] = useState('');\n\n\n  useEffect(()=>{\n    fetchData();\n  },[]);\n\n  const fetchData = async () => {\n    const result = await fetch(`https://pokeapi.co/api/v2/pokemon/${name}`);\n    const json = await result.json();\n    console.log(json);\n    setData1(json.stats);\n    setData2(json.height);\n    setData3(json.name);\n    setData4(json.weight);\n    setData5(json.sprites.front_default);\n    \n  };\n\n  return (\n    <div className=\"App\">\n      <Navbar/>\n      <p>Write name of pokemon and find out information about them</p>\n      <p>(Enter name without capital letters)</p>\n      <input onChange={(event)=> setName(event.target.value)} className=\"mb-3 pl-2 pr-2\" placeholder=\"ditto\" /><br/>\n      <button onClick={()=> fetchData()} className=\"btn btn-info btn-lg mb-2\">GO!</button><hr/>\n      <Info height={data2} name={data3} weight={data4} pic={data5} />\n      {data1.map((data,ind) => (\n        <Result\n          val={data.base_stat}\n          statName={data.stat.name}\n          key={ind}\n        />\n      ))}\n      <hr/>\n      <p style={{fontSize:\"13px\", color:\"white\"}}>Made by <a style={{color:\"white\"}} href=\"https://www.linkedin.com/in/prateek-jakhar-a64a04197/\">Prateek Jakhar</a> using Poke API</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}